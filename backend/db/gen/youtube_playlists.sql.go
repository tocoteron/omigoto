// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: youtube_playlists.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createYouTubePlaylist = `-- name: CreateYouTubePlaylist :exec
INSERT INTO youtube_playlists (playlist_id, channel_id, is_uploads, title)
VALUES ($1, $2, $3, $4)
`

type CreateYouTubePlaylistParams struct {
	PlaylistID string
	ChannelID  string
	IsUploads  bool
	Title      pgtype.Text
}

func (q *Queries) CreateYouTubePlaylist(ctx context.Context, arg CreateYouTubePlaylistParams) error {
	_, err := q.db.Exec(ctx, createYouTubePlaylist,
		arg.PlaylistID,
		arg.ChannelID,
		arg.IsUploads,
		arg.Title,
	)
	return err
}

const getUploadsPlaylistByChannel = `-- name: GetUploadsPlaylistByChannel :one
SELECT playlist_id, channel_id, is_uploads, title FROM youtube_playlists
WHERE channel_id = $1 AND is_uploads = true
`

func (q *Queries) GetUploadsPlaylistByChannel(ctx context.Context, channelID string) (YoutubePlaylist, error) {
	row := q.db.QueryRow(ctx, getUploadsPlaylistByChannel, channelID)
	var i YoutubePlaylist
	err := row.Scan(
		&i.PlaylistID,
		&i.ChannelID,
		&i.IsUploads,
		&i.Title,
	)
	return i, err
}

const getYouTubePlaylist = `-- name: GetYouTubePlaylist :one
SELECT playlist_id, channel_id, is_uploads, title FROM youtube_playlists
WHERE playlist_id = $1
`

func (q *Queries) GetYouTubePlaylist(ctx context.Context, playlistID string) (YoutubePlaylist, error) {
	row := q.db.QueryRow(ctx, getYouTubePlaylist, playlistID)
	var i YoutubePlaylist
	err := row.Scan(
		&i.PlaylistID,
		&i.ChannelID,
		&i.IsUploads,
		&i.Title,
	)
	return i, err
}

const listYouTubePlaylistsByChannel = `-- name: ListYouTubePlaylistsByChannel :many
SELECT playlist_id, channel_id, is_uploads, title FROM youtube_playlists
WHERE channel_id = $1
`

func (q *Queries) ListYouTubePlaylistsByChannel(ctx context.Context, channelID string) ([]YoutubePlaylist, error) {
	rows, err := q.db.Query(ctx, listYouTubePlaylistsByChannel, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []YoutubePlaylist
	for rows.Next() {
		var i YoutubePlaylist
		if err := rows.Scan(
			&i.PlaylistID,
			&i.ChannelID,
			&i.IsUploads,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

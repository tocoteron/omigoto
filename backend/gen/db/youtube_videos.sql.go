// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: youtube_videos.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createYouTubeVideo = `-- name: CreateYouTubeVideo :exec
INSERT INTO youtube_videos (
    video_id, title, description, duration,
    thumbnail_default_url,thumbnail_medium_url, thumbnail_high_url, thumbnail_standard_url, thumbnail_maxres_url,
    published_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateYouTubeVideoParams struct {
	VideoID              string
	Title                string
	Description          string
	Duration             pgtype.Interval
	ThumbnailDefaultUrl  *string
	ThumbnailMediumUrl   *string
	ThumbnailHighUrl     *string
	ThumbnailStandardUrl *string
	ThumbnailMaxresUrl   *string
	PublishedAt          pgtype.Timestamptz
}

func (q *Queries) CreateYouTubeVideo(ctx context.Context, arg CreateYouTubeVideoParams) error {
	_, err := q.db.Exec(ctx, createYouTubeVideo,
		arg.VideoID,
		arg.Title,
		arg.Description,
		arg.Duration,
		arg.ThumbnailDefaultUrl,
		arg.ThumbnailMediumUrl,
		arg.ThumbnailHighUrl,
		arg.ThumbnailStandardUrl,
		arg.ThumbnailMaxresUrl,
		arg.PublishedAt,
	)
	return err
}

const createYouTubeVideoLiveStreamingDetails = `-- name: CreateYouTubeVideoLiveStreamingDetails :exec
INSERT INTO youtube_video_live_streaming_details (
    video_id, actual_start_time, actual_end_time, scheduled_start_time
)
VALUES ($1, $2, $3, $4)
`

type CreateYouTubeVideoLiveStreamingDetailsParams struct {
	VideoID            string
	ActualStartTime    pgtype.Timestamptz
	ActualEndTime      pgtype.Timestamptz
	ScheduledStartTime pgtype.Timestamptz
}

func (q *Queries) CreateYouTubeVideoLiveStreamingDetails(ctx context.Context, arg CreateYouTubeVideoLiveStreamingDetailsParams) error {
	_, err := q.db.Exec(ctx, createYouTubeVideoLiveStreamingDetails,
		arg.VideoID,
		arg.ActualStartTime,
		arg.ActualEndTime,
		arg.ScheduledStartTime,
	)
	return err
}

const getYouTubeVideo = `-- name: GetYouTubeVideo :one
SELECT video_id, title, description, duration, thumbnail_default_url, thumbnail_medium_url, thumbnail_high_url, thumbnail_standard_url, thumbnail_maxres_url, published_at FROM youtube_videos
WHERE video_id = $1
`

func (q *Queries) GetYouTubeVideo(ctx context.Context, videoID string) (YoutubeVideo, error) {
	row := q.db.QueryRow(ctx, getYouTubeVideo, videoID)
	var i YoutubeVideo
	err := row.Scan(
		&i.VideoID,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.ThumbnailDefaultUrl,
		&i.ThumbnailMediumUrl,
		&i.ThumbnailHighUrl,
		&i.ThumbnailStandardUrl,
		&i.ThumbnailMaxresUrl,
		&i.PublishedAt,
	)
	return i, err
}

const getYouTubeVideoLiveStreamingDetails = `-- name: GetYouTubeVideoLiveStreamingDetails :one
SELECT video_id, actual_start_time, actual_end_time, scheduled_start_time FROM youtube_video_live_streaming_details
WHERE video_id = $1
`

func (q *Queries) GetYouTubeVideoLiveStreamingDetails(ctx context.Context, videoID string) (YoutubeVideoLiveStreamingDetail, error) {
	row := q.db.QueryRow(ctx, getYouTubeVideoLiveStreamingDetails, videoID)
	var i YoutubeVideoLiveStreamingDetail
	err := row.Scan(
		&i.VideoID,
		&i.ActualStartTime,
		&i.ActualEndTime,
		&i.ScheduledStartTime,
	)
	return i, err
}

const listYouTubeVideos = `-- name: ListYouTubeVideos :many
SELECT video_id, title, description, duration, thumbnail_default_url, thumbnail_medium_url, thumbnail_high_url, thumbnail_standard_url, thumbnail_maxres_url, published_at FROM youtube_videos
WHERE video_id = ANY($1::text[])
`

func (q *Queries) ListYouTubeVideos(ctx context.Context, videoIds []string) ([]YoutubeVideo, error) {
	rows, err := q.db.Query(ctx, listYouTubeVideos, videoIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []YoutubeVideo{}
	for rows.Next() {
		var i YoutubeVideo
		if err := rows.Scan(
			&i.VideoID,
			&i.Title,
			&i.Description,
			&i.Duration,
			&i.ThumbnailDefaultUrl,
			&i.ThumbnailMediumUrl,
			&i.ThumbnailHighUrl,
			&i.ThumbnailStandardUrl,
			&i.ThumbnailMaxresUrl,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
